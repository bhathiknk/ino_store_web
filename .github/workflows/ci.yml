name: Node.js CI/CD with Docker

on:
  push:
    branches: [ CI/CD ]
  pull_request:
    branches: [ CI/CD ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up Node.js for Client
      - name: Set up Node.js for Client
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Set environment variables from secrets
        run: |
          echo "PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }}" >> $GITHUB_ENV
          echo "PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "PAYPAL_MODE=${{ secrets.PAYPAL_MODE }}" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
          echo "MONGO_URI=mongodb://host.docker.internal:27017/inoweb" >> $GITHUB_ENV
          echo "MONGO_URI_TEST=mongodb://host.docker.internal:27017/inoweb_test" >> $GITHUB_ENV
          
          
          # Install dependencies in Client
      - name: Install dependencies in Client
        run: |
          cd client
          npm install

      # Run ESLint in Client
      - name: Run ESLint in Client
        run: |
          cd client
          npm run lint

      # Run tests in Client
      - name: Run tests in Client
        run: |
          cd client
          npm test

      # Set up Node.js for Server
      - name: Set up Node.js for Server
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      # Install dependencies in Server
      - name: Install dependencies in Server
        run: |
          cd server
          npm install

      # Run tests in Server
      - name: Run tests in Server
        run: |
          cd server
          npm test

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Build Docker Image for Client
      - name: Build Docker Image for Client
        run: docker build -t $DOCKER_USERNAME/inoweb-client:1.4 ./client

      # Build Docker Image for Server
      - name: Build Docker Image for Server
        run: docker build -t $DOCKER_USERNAME/inoweb-server:1.4 ./server

      # Push Docker Images to Docker Hub
      - name: Push Docker Images
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push $DOCKER_USERNAME/inoweb-client:1.4
          docker push $DOCKER_USERNAME/inoweb-server:1.4

      # Validate Docker Compose
      - name: Validate Docker Compose
        run: docker-compose -f docker-compose.yml config
